[project]
name = "cygunet"
readme = "README.md"
dynamic = ["dependencies", "version"]

[project.scripts]
cygunet = "cygunet.__main__:main"

[project.entry-points."kedro.hooks"]

[project.optional-dependencies]
docs = [
    "docutils<0.18.0",
    "sphinx~=3.4.3",
    "sphinx_rtd_theme==0.5.1",
    "nbsphinx==0.8.1",
    "sphinx-autodoc-typehints==1.11.1",
    "sphinx_copybutton==0.3.1",
    "ipykernel>=5.3, <7.0",
    "Jinja2<3.1.0",
    "myst-parser~=0.17.2",
]

[tool.setuptools.dynamic]
dependencies = {file = "requirements.txt"}
version = {attr = "cygunet.__version__"}

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.kedro]
package_name = "cygunet"
project_name = "cygunet"
kedro_init_version = "0.19.4"
tools = ['Linting', 'Testing', 'Custom Logging', 'Documentation', 'Data Structure', 'PySpark', 'Kedro Viz']
example_pipeline = "True"
source_dir = "src"

[tool.pytest.ini_options]
addopts = """
--cov-report term-missing \
--cov src/cygunet -ra"""
testpaths = "tests"

[tool.coverage.report]
fail_under = 0
show_missing = true
exclude_lines = ["pragma: no cover", "raise NotImplementedError"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff]
line-length = 88
show-fixes = true
select = [
    "F",   # Pyflakes
    "W",   # pycodestyle
    "E",   # pycodestyle
    "I",   # isort
    "UP",  # pyupgrade
    "PL",  # Pylint
    "T201", # Print Statement
]
ignore = ["E501"]  # Ruff format takes care of line-too-long

[tool.poetry]
name = "cygunet"
version = "0.1.0"
description = ""
authors = ["Guilherme Pinheiro <guilherme.lopes@engenharia.ufjf.br>"]

[tool.poetry.dependencies]
python = "^3.9"

kedro = ">=0.19.4,<0.20.0"
kedro-datasets = {version = ">=1.0", markers = "python_version < \"3.9\"", extras = ["matplotlib-matplotlibwriter", "pandas-csvdataset", "plotly-jsondataset", "plotly-plotlydataset"]}
kedro-telemetry = ">=0.3.1"
pytest = ">=7.2,<8.0"
pytest-mock = ">=1.7.1,<2.0"
ruff = ">=0.1.8,<0.2.0"
scikit-learn = ">=1.0,<2.0"
seaborn = ">=0.12.1,<0.13.0"
uproot = "5.3.3"
[tool.poetry.dev-dependencies]

[tool.poetry.group.dev.dependencies]
antlr4-python3-runtime = "4.9.3"
arrow = "1.3.0"
attrs = "23.2.0"
awkward = "2.6.4"
awkward-cpp = "33"
binaryornot = "0.4.4"
build = "1.2.1"
cachecontrol = "0.14.0"
cachetools = "5.3.3"
certifi = "2024.2.2"
cffi = "1.16.0"
chardet = "5.2.0"
charset-normalizer = "3.3.2"
cleo = "2.1.0"
click = "8.1.7"
cookiecutter = "2.6.0"
coverage = "7.5.1"
cramjam = "2.8.3"
crashtest = "0.4.1"
cryptography = "42.0.7"
distlib = "0.3.8"
dulwich = "0.21.7"
dynaconf = "3.2.5"
fastjsonschema = "2.19.1"
filelock = "3.14.0"
fsspec = "2024.3.1"
gitdb = "4.0.11"
gitpython = "3.1.43"
h5py = "3.11.0"
idna = "3.7"
importlib-metadata = "7.1.0"
importlib-resources = "6.4.0"
iniconfig = "2.0.0"
installer = "0.7.0"
jaraco-classes = "3.4.0"
jeepney = "0.8.0"
jinja2 = "3.1.4"
kedro = "0.19.5"
keyring = "24.3.1"
markdown-it-py = "3.0.0"
markupsafe = "2.1.5"
mdurl = "0.1.2"
more-itertools = "10.2.0"
msgpack = "1.0.8"
numpy = "1.26.4"
omegaconf = "2.3.0"
packaging = "24.0"
pandas = "2.2.2"
parse = "1.20.1"
pexpect = "4.9.0"
pkginfo = "1.10.0"
platformdirs = "4.2.2"
poetry = "1.8.3"
poetry-core = "1.9.0"
poetry-plugin-export = "1.8.0"
pre-commit-hooks = "4.6.0"
ptyprocess = "0.7.0"
pycparser = "2.22"
pygments = "2.18.0"
pyproject-hooks = "1.1.0"
pytest-cov = "5.0.0"
python-dateutil = "2.9.0.post0"
python-slugify = "8.0.4"
pytoolconfig = "1.3.1"
pytz = "2024.1"
pyyaml = "6.0.1"
rapidfuzz = "3.9.0"
requests = "2.31.0"
requests-toolbelt = "1.0.0"
rich = "13.7.1"
rope = "1.13.0"
ruamel-yaml = "0.18.6"
ruamel-yaml-clib = "0.2.8"
secretstorage = "3.3.3"
shellingham = "1.5.4"
six = "1.16.0"
smmap = "5.0.1"
text-unidecode = "1.3"
toml = "0.10.2"
tomlkit = "0.12.5"
trove-classifiers = "2024.5.17"
types-python-dateutil = "2.9.0.20240316"
tzdata = "2024.1"
uproot = "5.3.3"
urllib3 = "2.2.1"
virtualenv = "20.26.2"
zipp = "3.18.1"
black = "^24.4.2"
docstringformatter = "^1.0.0"
pydocstringformatter = "^0.7.3"

pre-commit = "^3.7.1"
[tool.black]
line-length = 79
target-version = ['py311']
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pydocstringformatter]
write = true
exclude = ["venv/**"]
strip-whitespaces = true
split-summary-body = false
numpydoc-section-hyphen-length = false

[tool.poetry.scripts]
#run it usin poetry run synchronize --dev (use it or no depend of case)
synchronize = "add_dependencies:add_dependencies"